import pygame
from pygame.sprite import Sprite
import sys
from time import sleep
import pygame.font


class Settings:
    def __init__(self):
        pygame.mixer.init()
        self.screen_width = 1200
        self.screen_height = 800
        self.bg_color = (230,230,230)
        self.bg_music = pygame.mixer.Sound('sounds/newbattle.wav')

        self.ship_speed = 1.5
        self.ship_limit = 2

        self.bullet_speed = 1.0
        self.bullet_width = 3
        self.bullet_height = 15
        self.bullet_color = (60,60,60)
        self.bullets_limit = 3
        self.bullet_sound = pygame.mixer.Sound('sounds/laserpew.ogg')

        self.alien_speed = 1.0
        self.alein_sound = pygame.mixer.Sound('sounds/laser2.wav')
        self.fleet_direction = 1
        self.fleet_dropspeed = 10

class Ship:
    def __init__ (self,ai_game):
        self.screen = ai_game.screen
        self.settings = ai_game.settings
        self.image = pygame.image.load('images/ship.bmp')
        self.rect = self.image.get_rect()
        self.screen_rect = self.screen.get_rect()
        self.rect.midbottom = self.screen_rect.midbottom

        self.moving_right = False
        self.moving_left = False
        self.x = float(self.rect.x)

    def centre_ship(self): 
        self.rect.midbottom = self.screen_rect.midbottom
        self.x = float(self.rect.x)


    def update(self):
        if self.moving_right and self.rect.right < self.screen_rect.right:
            self.x += self.settings.ship_speed
        if self.moving_left and self.rect.left > self.screen_rect.left:
            self.x -= self.settings.ship_speed
        self.rect.x = self.x        

    def blitme(self):
        self.screen.blit(self.image, self.rect)

class Bullet(Sprite):
    def __init__(self, ai_game):
        super().__init__()
        self.screen = ai_game.screen
        self.settings = ai_game.settings
        self.color = self.settings.bullet_color

        self.rect = pygame.Rect(0,0,self.settings.bullet_width,self.settings.bullet_height)
        self.rect.midtop = ai_game.ship.rect.midtop

        self.y = float(self.rect.y)

    def update(self):
        self.y -= self.settings.bullet_speed
        self.rect.y = self.y 

    def draw_bullet(self):
        pygame.draw.rect(self.screen, self.color, self.rect)         

class Alien(Sprite):
    def __init__ (self, ai_game):
        super().__init__()
        self.screen = ai_game.screen
        self.settings = ai_game.settings

        self.image = pygame.image.load('images/alien.bmp')
        self.rect = self.image.get_rect()

        self.rect.x = self.rect.width
        self.rect.y = self.rect.height
        self.x = float(self.rect.x)

    def _check_edges(self):
        self.screen_rect = self.screen.get_rect()
        if self.rect.right >= self.screen_rect.right or self.rect.left <= 0:
            return True  

    def update(self):
        self.x += (self.settings.alien_speed*self.settings.fleet_direction)
        self.rect.x = self.x  

class GameStats:
    def __init__(self,ai_game):
        self.game_active = False
        self.settings = ai_game.settings
    def reset_stats(self):
        self.ship_left = self.settings.ship_limit    

class Button:
    def __init__(self,ai_game,msg):
        self.screen = ai_game.screen
        self.screen_rect = self.screen.get_rect()

        self.width,self.height = 200, 50
        self.button_color = (30,30,30)
        self.text_color = (255,255,255)
        self.font = pygame.font.SysFont(None,48)

        self.rect = pygame.Rect(0,0,self.width,self.height)
        self.rect.center = self.screen_rect.center

        self._prep_msg(msg)

    def _prep_msg(self, msg):
        self.msg_image = self.font.render(msg,True,self.text_color,self.button_color)
        self.msg_image_rect = self.msg_image.get_rect()
        self.msg_image_rect.center = self.rect.center

    def draw_button(self):
        self.screen.fill(self.button_color, self.rect)
        self.screen.blit(self.msg_image, self.msg_image_rect)


 
class AlienInvasion:
    def __init__ (self):
        pygame.init()

        self.settings = Settings()
        self.screen = pygame.display.set_mode((self.settings.screen_width, self.settings.screen_height))
        self.ship = Ship(self)
        self.bullets = pygame.sprite.Group()
        self.aliens = pygame.sprite.Group()
        self.stats = GameStats(self)
        self.play_button = Button(self, "Play")
        pygame.display.set_caption("Alien Invasion")

        self._create_fleet()

    def run_game(self):
        while True:
            self._check_events()
            self._update_screen()
            if self.stats.game_active == True:
                self.ship.update()
                self._update_bullets()
                self._update_aliens()
                self.settings.bg_music.fadeout(750)
            if self.stats.game_active == False:
                self.settings.bg_music.play()   

    def _check_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                self._check_keydown_events(event)
            elif event.type == pygame.KEYUP:
                self._check_keyup_events(event)
            elif event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = pygame.mouse.get_pos()
                self._check_play_button(mouse_pos)    

    def _check_keydown_events(self, event):
        if event.key == pygame.K_RIGHT:
            self.ship.moving_right = True
        elif event.key == pygame.K_LEFT:
            self.ship.moving_left = True
        elif event.key == pygame.K_SPACE:
            self._fire_bullet()
        elif event.key == pygame.K_p:
            self.stats.game_active = True    
        elif event.key == pygame.K_q:                   
            sys.exit()

    def _check_keyup_events(self, event):
        if event.key == pygame.K_RIGHT:
            self.ship.moving_right = False
        elif event.key == pygame.K_LEFT:
            self.ship.moving_left = False 

    def _check_play_button(self,mouse_pos):
        button_click = self.play_button.rect.collidepoint(mouse_pos)
        shop_click = self.shop_button.rect.collidepoint(mouse_pos)
        if button_click and not self.stats.game_active:
            self.stats.reset_stats()
            pygame.mouse.set_visible(False)
            self.stats.game_active = True
            self.aliens.empty()
            self.bullets.empty()
            self._create_fleet()
            self.ship.centre_ship()

    def _fire_bullet(self):
        if len(self.bullets) <= self.settings.bullets_limit:
            bullet = Bullet(self)
            self.bullets.add(bullet)
            self.settings.bullet_sound.play()

    def _update_bullets(self):
        self.bullets.update()

        for bullet in self.bullets.copy():
            if bullet.rect.bottom <= 0:
                 self.bullets.remove(bullet)
        self._check_bullet_collision()

    def _check_bullet_collision(self):
        collision = pygame.sprite.groupcollide(self.bullets,self.aliens,True,True)

        if not self.aliens:
            self.bullets.empty()
            self._create_fleet()               

    def _create_fleet(self):
        alien = Alien(self)
        alien_width, alien_height = alien.rect.size
        available_space_x = self.settings.screen_width - (2 * alien_width)
        number_aliens_x = available_space_x // (2 * alien_width)

        ship_height = self.ship.rect.height
        available_space_y = (self.settings.screen_height -
                                (3 * alien_height) - ship_height)
        number_rows = available_space_y // (2 * alien_height)
        

        for row_number in range(number_rows):
            for alien_number in range(number_aliens_x):
                self._create_alien(alien_number, row_number)

    def _create_alien(self, alien_number, row_number):
        alien = Alien(self)
        alien_width, alien_height = alien.rect.size
        alien.x = alien_width + 2 * alien_width * alien_number
        alien.rect.x = alien.x
        alien.rect.y = alien_height + 2 * alien_height * row_number
        self.aliens.add(alien)    

    def _update_aliens(self):
        self.aliens.update()
        self._check_fleet_edges()

        for alien in self.aliens.copy():
            if alien.rect.bottom >= self.settings.screen_height:
                self.aliens.remove(alien)

        if pygame.sprite.spritecollideany(self.ship, self.aliens):
            self._ship_hit()


    def _check_fleet_edges(self):
        for alien in self.aliens.sprites():
            if alien._check_edges():
                self._change_fleet_direction()
                break

    def _change_fleet_direction(self):
        for alien in self.aliens.sprites():
            alien.rect.y += self.settings.fleet_dropspeed
        self.settings.fleet_direction *= -1 

    def _ship_hit(self):

        if self.stats.ship_left > 0:
            self.stats.ship_left -= 1
            self.aliens.empty()
            self.bullets.empty()
            self._create_fleet()
            self.ship.centre_ship()
            sleep(0.5)
        else:
            self.stats.game_active = False 
            pygame.mouse.set_visible(True)    



    def _update_screen(self):
        self.screen.fill(self.settings.bg_color)
        self.ship.blitme()
        for bullet in self.bullets.sprites():
            bullet.draw_bullet()
        self.aliens.draw(self.screen)
        if not self.stats.game_active:
            self.play_button.draw_button()
            self.shop_button.draw_button()    
        pygame.display.flip()            

if __name__ == '__main__':
    ai = AlienInvasion()
    ai.run_game()

    
